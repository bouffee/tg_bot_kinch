import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from dotenv import load_dotenv
import random
import json
import asyncio

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
DATA_FILE='data.json'
ALLOWED_USERS=[int(x) for x in os.getenv('USERS').split(',')]

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            content = f.read().strip()
            if not content:  # –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
                return []
            return json.loads(content)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def restricted(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USERS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        return await func(update, context)
    return wrapper

@restricted
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["/list", "/add", "/remove"],
        ["/random", "/clear", "/hat"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=reply_markup
    )

@restricted
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n
        /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º \n
        /help - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏ \n
        /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ \n
        /add - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫ \n
        /remove - —É–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ \n
        /random - –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ \n
        /clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ \n
        /hat - –∏–≥—Ä–∞ –≤ —à–ª—è–ø—É —Å —Ñ–∏–ª—å–º–∞–º–∏
        """
    )
    await update.message.reply_text(help_text)

@restricted
async def movie_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç...")
        return
    await update.message.reply_text("\n".join(data))

@restricted
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')
        return
    
    value = ' '.join(context.args)
    data = load_data()
    data.append(value)
    save_data(data)
    await update.message.reply_text(f"*{value}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!", parse_mode='Markdown')

@restricted
async def remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã')
        return
    
    data = load_data()
    if not data:
        await update.message.reply_text('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç...')
        return
    
    value = ' '.join(context.args)
    data = load_data()
    if value in data:
        data.remove(value)
        save_data(data)
        await update.effective_message.reply_text(f"–£–¥–∞–ª–µ–Ω —Ñ–∏–ª—å–º *{value}*", parse_mode='Markdown')
    else:
        await update.effective_message.reply_text(f"–¢–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç")

@restricted
async def get_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data:
        await update.message.reply_text('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç...')
        return
    value = random.choice(data)
    await update.message.reply_text(f'–°–º–æ—Ç—Ä–∏–º *{value}*', parse_mode='Markdown')

@restricted
async def remove_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    if not data:
        await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ —É–∂–µ –ø—É—Å—Ç.")
        return

    save_data([])  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
    await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!")

@restricted 
async def hat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π')
    context.user_data['state'] = 'waiting_for_count'

@restricted 
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    if state == 'waiting_for_count':
        try:
            count = int(update.message.text)
        except ValueError:
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
            return

        context.user_data['count'] = count
        context.user_data['films'] = []
        context.user_data['state'] = 'waiting_for_films'

        await update.message.reply_text(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ {count} —Ñ–∏–ª—å–º–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)')
        return

    elif state == 'waiting_for_films':
        film = update.message.text.strip()
        context.user_data['films'].append(film)
        remaining = context.user_data['count'] - len(context.user_data['films'])

        if remaining > 0:
            await update.message.reply_text(f'–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å–º <tg-spoiler>{film}</tg-spoiler>. –û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –µ—â—ë {remaining} —Ñ–∏–ª—å–º–æ–≤', parse_mode=ParseMode.HTML)
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)    
        else:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)   
            await update.message.reply_text('–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–±–æ—Ä —Ñ–∏–ª—å–º–∞...')
            await asyncio.sleep(1)

            films = context.user_data['films']
            while len(films) > 1:
                value = random.choice(films)
                films.remove(value)
                await update.message.reply_text(f'–í—ã–±—ã–≤–∞–µ—Ç *{value}*', parse_mode='Markdown')
                await asyncio.sleep(1)
            winner = films[0]
            await update.message.reply_text(f'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: *{winner}*!', parse_mode='Markdown')
            context.user_data.clear()

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
   
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("list", movie_list))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("remove", remove))
    app.add_handler(CommandHandler("random", get_random))
    app.add_handler(CommandHandler("clear", remove_all))
    app.add_handler(CommandHandler("hat", hat))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()